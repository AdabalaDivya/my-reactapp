{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","img/profile.svg"],"names":["module","exports","Home","profile","data","profiles","console","log","className","map","value","index","key","style","width","fontStyle","boxShadow","src","pro","height","basics","pname","role","href","email","phone","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,2JCmB3C,IAAIC,EAAK,WACP,IAAIC,EAAQC,EAAKC,SAEjB,OADAC,QAAQC,IAAIJ,GAER,yBAAKK,UAAU,8BACZL,EAAQM,KAAI,SAACC,EAAMC,GAAP,OACX,yBAAKH,UAAU,mCAAmCI,IAAKD,GACzD,yBAAKH,UAAU,OAAOK,MAAO,CAACC,MAAM,QAAQC,UAAU,SAASC,UAAU,2BACzE,yBAAKC,IAAKC,IAAKL,MAAO,CAACM,OAAO,SAC9B,yBAAKX,UAAU,yBACf,4BAAKE,EAAMU,OAAOC,OAClB,yBAAKb,UAAU,kBACb,4BAAKE,EAAMU,OAAOE,OAEpB,uBAAGC,KAAM,MAAMb,EAAMU,OAAOI,OAAQd,EAAMU,OAAOI,OAAU,6BAC3D,uBAAGD,KAAM,SAASb,EAAMU,OAAOK,OAAQf,EAAMU,OAAOK,OAAU,6BAC/D,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAMjB,UAAU,mBAAhB,iBAYIkB,EAxCf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,IAAIC,UAAW3B,KAGnC,kBAAC,EAAD,QCHgB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a,kBEzI5BhD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.6de7634e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport pro from './img/profile.svg';\nimport data from './data/data.json';\nimport {BrowserRouter,Route,Link} from 'react-router-dom';\nimport resume from './resume';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Route exact path='/' component={Home} />\n      {/* <Route exact path='/resume' component={resume}/> */}\n      </BrowserRouter>\n    <Home/>\n    </div>\n  );\n}\nlet Home=()=>{\n  let profile=data.profiles;\n  console.log(profile);\n  return(\n      <div className=\"row justify-content-center\">\n        {profile.map((value,index)=>(\n          <div className=\"col-lg-4 col-md-4 col-sm-10 mt-5\" key={index}>\n        <div className=\"card\" style={{width:\"25rem\",fontStyle:\"italic\",boxShadow:\"0px 5px 5px -5px #1000\"}}>\n        <img src={pro} style={{height:\"50%\"}}/>\n        <div className=\"card-body text-center\">\n        <h1>{value.basics.pname}</h1>\n        <div className=\"text-secondary\">\n          <h1>{value.basics.role}</h1>\n        </div>\n        <a href={\"tel\"+value.basics.email}>{value.basics.email}</a><br/>\n        <a href={\"mailto\"+value.basics.phone}>{value.basics.phone}</a><br/>\n       <BrowserRouter>\n           <Link className=\"btn btn-primary\">view</Link>\n        </BrowserRouter>\n        {/* <Link to={{pathname:'/resume',data:{id:index}}} className=\"btn btn-primary\">view</Link> */}\n        {/* <button href=\"resume\">view</button> */}\n        </div>\n      </div>\n      </div>\n       ))}\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.dbe3845e.svg\";"],"sourceRoot":""}